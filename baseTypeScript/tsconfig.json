{
  "include": [    // 指定运行js的范围，通常是跟allowjs、checkjs一起使用
    "src"
  ],
  "compilerOptions": {
    /* Basic Options */
    // "incremental": true,                   /*  增量编译提高编译速度 */
    // "target": "es5",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. 指定目标语言的版本*/
    // "module": "commonjs",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. 生成模块代码的标准*/
    // "lib": ["es2019.array"],                             /* TS引入的库，及声明文件 */
    // "allowJs": true,                       /* 允许编译js文件*/
    // "checkJs": true,                       /* 允许在js文件中报错，通常与allowjs一起使用*/
    // "jsx": "preserve",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */
    // "declaration": true,                   /* Generates corresponding '.d.ts' file. 生成声明文件*/
    // "declarationDir": "./d"                // 生成文件的路径
    // "emitDeclarationOnly": true            // 只生成声明文件
    // "declarationMap": true,                /* 生成声明文件的sourceMap Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. 生成目标文件的sourceMap*/
    // "outFile": "./app.js",                 /* 将多个相互依赖的文件上生成一个文件,可以用在AMD模块中*/
    // "outDir": "./out",                     /*  指定输出目录*/
    // "rootDir": "./",                       /* 指定输入文件目录*/
    // "composite": true,                     /* Enable project compilation */
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information 增量编译文件的储存位置 */
    // "removeComments": true,                /* Do not emit comments to output. 删除注释*/
    // "noEmit": true,                        /* 不输出文件Do not emit outputs. */
    // "noEmitError": true,                   // 发生错误不输出文件
    // "noEmitHelper": true,                  // 不生成helper函数，需额外安装ts-helper
    // "importHelpers": true,                 /* 通过tslib引入helper函数，文件必须是模块 Import emit helpers from 'tslib'. */
    // "downlevelIteration": true,            /* 降级遍历器的实现(es3/5)Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    "strict": true,                           /* 开启所有严格的类型检查Enable all strict type-checking options. */
    // "noImplicitAny": true,                 /* 不允许隐式的any类型 Raise error on expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,              /* 不允许把null、undefined赋值给其他类型变量 Enable strict null checks. */
    // "strictFunctionTypes": true,           /* 不允许函数参数双向协变 Enable strict checking of function types. */
    // "strictBindCallApply": true,           /* 严格的bind/call/apply检 查 Enable strict 'bind', 'call', and 'apply' methods on functions. */
    // "strictPropertyInitialization": true,  /* 类的实例数型必须初始化 Enable strict checking of property initialization in classes. */
    // "noImplicitThis": false,                /* 不允许this有隐式的any类型 Raise error on 'this' expressions with an implied 'any' type. */
    // "alwaysStrict": true,                  /* 在代码中注入 "use strict" Parse in strict mode and emit "use strict" for each source file. */

    /* Additional Checks */
    // "noUnusedLocals": true,                /* 检查只声明，未使用的局部变量 Report errors on unused locals. */
    // "noUnusedParameters": true,            /* 检查未使用的函数参数 Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* 每一个分支都要有返回值  Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* 防止switch语句贯穿 Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // "moduleResolution": "node",            /* 模块解析策略 Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */
    // "baseUrl": "./",                       /* 解析非相对模块的基地址 Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* 路径映射，相当于baseURL A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* 将多个目录放在一个虚拟目录下用于运行时 List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* 声明文件目录List of folders to include type definitions from. */
    // "types": [],                           /* 声明文件包 Type declaration files to be included in compilation. */
    // "allowSyntheticDefaultImports": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */
    "esModuleInterop": true                   /* 允许export = 导出有import from导入 Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */
    // "preserveSymlinks": true,              /*  Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* 允许在模块之间访问UMD全局变量 Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* 生成目标文件的inline sourceMap Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */
    // "listEmittedFiles": true               // 打印输出文件
    // "listFiles": true                      // 打印编译的文件
  }
}
